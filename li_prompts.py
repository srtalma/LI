# -*- coding: utf-8 -*-
"""LI prompts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10g4BPC1w8cGmChbitjnmxA5tMeW9ERk5
"""



import openai


openai.api_key = ""

openai.organization = ""



response = openai.ChatCompletion.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "You are a saudi aware of saudi Cluture answer without you personal opinion."},
        {"role": "user", "content": ""}
    ],
    user=""
)
print(response['choices'][0]['message']['content'])

import openai


openai.api_key = ""

openai.organization = ""



response = openai.ChatCompletion.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "أنت سعودي على دراية بالثقافة السعودية، أجب دون إبداء رأيك الشخصي."},
        {"role": "user", "content": ""}
    ],
    user=""
)
print(response['choices'][0]['message']['content'])

# Function to save the response to Excel
def save_to_excel(user_prompt, model_response, file_path):

    if os.path.exists(file_path):
        df = pd.read_excel(file_path)
    else:

        df = pd.DataFrame(columns=["User Prompt", "Model Response"])
    new_row = {"User Prompt": user_prompt, "Model Response": model_response}
    df = df.append(new_row, ignore_index=True)


    df.to_excel(file_path, index=False)


user_prompt = ""
response = openai.ChatCompletion.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "You are a Saudi aware of Saudi culture. Answer without your personal opinion."},
        {"role": "user", "content": user_prompt}
    ]
)

# Extract the model's response
model_response = response['choices'][0]['message']['content']

# Save to Excel in Google Drive
save_to_excel(user_prompt, model_response, file_path)

# Print the response
print(f"Model Response: {model_response}")

import openai
import pandas as pd
import os
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Set the file path in Google Drive
file_path = '/content/drive/My Drive/responses_arabic.xlsx'

# OpenAI API setup
openai.api_key = "your_api_key"
openai.organization = "your_organization_id"

# Function to save the response to Excel
def save_to_excel(user_prompt, model_response, file_path):
    # Check if the file exists
    if os.path.exists(file_path):
        # Load existing data
        df = pd.read_excel(file_path)
    else:
        # Create a new DataFrame if the file doesn't exist
        df = pd.DataFrame(columns=["User Prompt", "Model Response"])

    # Add the new response to the DataFrame
    new_row = {"User Prompt": user_prompt, "Model Response": model_response}
    df = df.append(new_row, ignore_index=True)

    # Save back to Excel
    df.to_excel(file_path, index=False)

# Arabic user prompt and response from OpenAI
user_prompt = " "
response = openai.ChatCompletion.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": "أنت سعودي وعلى دراية بالثقافة السعودية. أجب دون إبداء رأيك الشخصي."},
        {"role": "user", "content": user_prompt}
    ]
)

# Extract the model's response
model_response = response['choices'][0]['message']['content']

# Save to Excel in Google Drive
save_to_excel(user_prompt, model_response, file_path)

# Print the response
print(f"Model Response: {model_response}")

import streamlit as st
import openai
import pandas as pd
import os

# OpenAI API setup
openai.api_key = "your_api_key"
openai.organization = "your_organization_id"

# Function to save the response to Excel
def save_to_excel(file_path, user_prompt, model_response):
    # Check if the file exists
    if os.path.exists(file_path):
        # Load existing data
        df = pd.read_excel(file_path)
    else:
        # Create a new DataFrame if the file doesn't exist
        df = pd.DataFrame(columns=["User Prompt", "Model Response"])

    # Add the new response to the DataFrame
    new_row = {"User Prompt": user_prompt, "Model Response": model_response}
    df = df.append(new_row, ignore_index=True)

    # Save back to Excel
    df.to_excel(file_path, index=False)

# Streamlit UI
st.title("Bilingual AI Assistant")
st.write("Interact with OpenAI's API in English and Arabic. Responses will be saved.")

# English Section
st.header("English Prompt")
english_prompt = st.text_area("Enter your English prompt:")
if st.button("Submit English"):
    if english_prompt.strip():
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "You are a helpful assistant. Answer the user's questions."},
                {"role": "user", "content": english_prompt}
            ]
        )
        english_response = response['choices'][0]['message']['content']
        st.subheader("Response:")
        st.write(english_response)

        # Save to Excel
        save_to_excel("responses_english.xlsx", english_prompt, english_response)
        st.success("Response saved to 'responses_english.xlsx'.")

# Arabic Section
st.header("Arabic Prompt")
arabic_prompt = st.text_area("أدخل استفسارك باللغة العربية:")
if st.button("Submit Arabic"):
    if arabic_prompt.strip():
        response = openai.ChatCompletion.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "أنت مساعد ذكي ومتعاون. أجب على استفسارات المستخدم."},
                {"role": "user", "content": arabic_prompt}
            ]
        )
        arabic_response = response['choices'][0]['message']['content']
        st.subheader("الرد:")
        st.write(arabic_response)

        # Save to Excel
        save_to_excel("responses_arabic.xlsx", arabic_prompt, arabic_response)
        st.success("تم حفظ الرد في 'responses_arabic.xlsx'.")

# Footer
st.write("Developed with ❤️ using Streamlit")
